#!/usr/bin/env python3
"""
PICture SOrt Unifier
This script sort a picture directory, deduplicate pics and clean it.
For more info, RTFS.
"""
import datetime
import hashlib
import itertools
import os
import shutil
import sys
import logging

import exifread
from hachoir.parser import createParser
from hachoir.metadata import extractMetadata

logging.getLogger("hachoir").setLevel(logging.ERROR)
logging.getLogger("exifread").setLevel(logging.ERROR)
logfile = "%s.log" % datetime.datetime.now()
logging.basicConfig(format='%(levelname)s : %(message)s', filename=logfile, level=logging.DEBUG)
logging.getLogger().addHandler(logging.StreamHandler())

patterns = ['%Y%m%d_%H%M%S',
            '%Y-%m-%d %H:%M:%S',
            'VID_%Y%m%d_%H%M%S',
            '%Y-%m-%d %H.%M.%S'
            ]
exclude_ext = ['tec', 'dup']
mim_file_size = 64000


def exif(media):
    with open(media, 'rb') as f:
        metadata = exifread.process_file(f, details=False)
        dt = metadata['Image DateTime']
        dt = datetime.datetime.strptime(str(dt), '%Y:%m:%d %H:%M:%S')
        return dt


def hachoir(media):
    parser = createParser(media)
    metadata = extractMetadata(parser)
    if metadata:
        dt = metadata.exportDictionary()['Metadata']['Creation date']
        dt = datetime.datetime.strptime(str(dt), '%Y-%m-%d %H:%M:%S')
        return dt


def strpfilename(media):
    dt = '.'.join(os.path.basename(media).split('.')[:-1])
    for f in patterns:
        try:
            print(dt, f)
            return datetime.datetime.strptime(str(dt), f)
        except Exception:
            continue
    logging.warning("no date extracted for media %s", media)


def parse(func, media):
    try:
        dt = func(media)
        if dt.year < 1980:
            raise Exception("date before 1980 : %s" % dt)
        else:
            return dt.year, dt.month, dt.isocalendar()[1]
    except Exception as e:
        logging.error("%s : %s : %s", media, func.__name__, str(e))
        return None


def walk(idir):
    trash = os.path.join(idir, 'trash')
    os.makedirs(trash, exist_ok=True)
    for root, dirs, files in os.walk(idir):
        for f in files:
            if f.split('.')[-1] in exclude_ext:
                continue
            filepath = os.path.join(root, f)
            if os.stat(filepath).st_size < mim_file_size and 'trash' not in filepath:
                os.rename(filepath, os.path.join(trash, "%s_%s" % (f, md5(filepath))))
                continue
            yield filepath

def clean(idir):
    for root, dirs, files in os.walk(idir):
        for name in dirs:
            dir = os.path.join(root, name)
            if not os.listdir(dir):
                os.rmdir(dir)
                logging.debug('rmdir %s', dir)

def extract_date(idir):
    for media in walk(idir):
        dt = parse(exif, media)
        if not dt:
            dt = parse(hachoir, media)
        if not dt:
            dt = parse(strpfilename, media)
        logging.debug("%s %s", media, dt)
        if dt:
            yield media, dt

def md5(media):
    hasher = hashlib.md5()
    with open(media, 'rb') as f:
        hasher.update(f.read())
    return hasher.hexdigest()


def get_output_filepath(of):
    for i in itertools.count():
        if not os.path.exists(of):
            return of
        else:
            split = of.split('.')
            split[-2] += '_%d' % i
            of = '.'.join(split)

def main():
    idir = sys.argv[1]
    for f, (year, month, weeknb) in extract_date(idir):
        year, month, weeknb = map(str, (year, month, weeknb))
        dst = os.path.join(idir, year, month, weeknb)
        os.makedirs(dst, exist_ok=True)
        if os.path.dirname(f) == dst:
            logging.debug("already in place %s", f)
        elif md5(f) in [md5(os.path.join(dst, o)) for o in os.listdir(dst)]:
            shutil.move(f, f + ".dup")
            logging.info("move %s to %s", f, f + ".dup")
            logging.warning("duplicate file %s in %s", f, dst)
        else:
            of = get_output_filepath(os.path.join(dst, os.path.basename(f)))
            shutil.move(f, of)
            logging.info("move %s to %s", f, of)
    clean(idir)

if __name__ == '__main__':
    main()
